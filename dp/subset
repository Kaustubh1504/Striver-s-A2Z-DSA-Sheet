//{ Driver Code Starts
//Initial template for C++

#include<bits/stdc++.h> 
using namespace std; 

// } Driver Code Ends
//User function template for C++

class Solution{   
public:
   
    bool present(int ind,int target,vector<int> & arr,vector<vector<int>> &dp){
       
       if(target==0) return true;
       if(ind==0) return (arr[0]==target);
       if(dp[ind][target]!=-1) return dp[ind][target];
       
       bool nottake = present(ind-1,target,arr,dp);
       bool take=false;
       if(arr[ind]<=target) take=present(ind-1,target-arr[ind],arr,dp);
       
       return dp[ind][target]=nottake|take;
    }
    bool isSubsetSum(vector<int>arr, int sum){
        // code here 
        // memset(dp,-1,sizeof(dp));
       
        int n = arr.size();
        vector<vector<bool>> dp(n,vector<bool>(sum+1,0));
     
        // bool ans = present(n-1,sum,arr,dp);
        for(int ind=0;ind<n;ind++) dp[ind][0]=true;
        dp[0][arr[0]]=true;
        
        for(int ind=1;ind<n;ind++){
            for(int target=1;target<=sum;target++){
                
               bool nottake = dp[ind-1][target];
               bool take=false;
               if(arr[ind]<=target) take=dp[ind-1][target-arr[ind]];
               dp[ind][target]=nottake|take;
                
            }
        }
        
        
        return dp[n-1][sum];
    }
};

//{ Driver Code Starts.
int main() 
{ 
    int t;
    cin>>t;
    while(t--)
    {
        int N, sum;
        cin >> N;
        vector<int> arr(N);
        for(int i = 0; i < N; i++){
            cin >> arr[i];
        }
        cin >> sum;
        
        Solution ob;
        cout << ob.isSubsetSum(arr, sum) << endl;
    }
    return 0; 
} 

// } Driver Code Ends
